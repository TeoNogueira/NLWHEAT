https://github.com/settings/applications/1742530 >>> config NODE BACKEND:

application description:

NLW HEAT 2021

Homepage URL * :

Homepage URL
http://localhost:4000


X---X--X---X--X--X-X-X-X-X-X-X--XX
Authorization callback URL *
http://localhost:4000/signin/callback

-X---X---X---X---X---X---X---X---X---X---X

tudo o que eu quiser passar informação de uma informação eu ponho no AuthContextProvider, no caso posso colocar todos os componentes que quiser, exemplo: que todos eles leiam uma autenticação (Todas as páginas(components que criei))


<AuthContextProvider value={null} >

    {props.children}
</AuthContextProvider>


--x---x--x-x--x-x-x-


propriedade children: É o que eu coloco dentro desse elemento, children é o que eu incluo dentro desse component 
===x===x===x==x=x==x=x==x=x=x==x=x=x=x=x=x=x=x=x

Um context é nada mais que um compartilhamento de informações entre vários contextos;
---x---x-x--x-x-x-x-x--x-x-x-x-x--x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x


Em react dois pontos de exclamação !! transforma em boolean True or False:

{ !!user} >> tbm pode ser assim >> { Bolean(user)}

{!!user ? <SendMessageForm/> : <LoginBox />} << tratativa do código em Boolean !! + if ternário;


---x---x--x-x-x-x--x-x-x-x-x-x-x-x--xx-x--x-x-x-x-x-x-x-x-x--x-x-x-x-x

Verificando se está nulo ou não ponha ponto de interrogação: 

<img src={user?.avatar_url} alt="" />

antes de tentar acessar o avatar ele checa o user!

---x---x--x-x-x-x--x-x-x-x-x-x-x-x--xx-x--x-x-x-x-x-x-x-x-x--x-x-x-x-x






